.transactionbox
  .ibox
    .ibox-title
      %h1 Send Lumens/Assets
      %br
      From Account
      %br
      .address
        = session[:address]
    .ibox-content
      = render partial: "shared/transfer_assets_form"

%script{src: "https://cdnjs.cloudflare.com/ajax/libs/stellar-sdk/0.8.0/stellar-sdk.min.js"}

:javascript
  function progressbar() {
    $("#secret-seed").prop("disabled", true)
    $("#target-account").prop("disabled", true)
    $("#amount-to-send").prop("disabled", true)
    $("#asset-type").prop("disabled", true)
    $("#progressbar").show()
    
    $("#progressbar").progressbar({
      value: false
    });

    var progressbar = $("#progressbar")
    var progressbarValue = progressbar.find( ".ui-progressbar-value" )
    progressbar.progressbar( "option", "value", false )
    progressbarValue.css({"background": "#1ab394"})
    $("#send_money").hide()
    $("#cancel-btn").hide()
  }
  
  function fund_new_account(sourcePublicKey, receiverPublicKey, amount) {
    document.location.href = "/fund_new_account?from_address=" + sourcePublicKey + "&to_address=" + receiverPublicKey + "&amount=" + amount
  }

  $('#send_money').click(function(event) {
    var sourceSecretKey = document.getElementById('secret-seed').value

    var receiverPublicKey = document.getElementById('target-account').value

    var amount = document.getElementById('amount-to-send').value

    var memo_type = $("input[name=memotype]:checked").val()

    var memo = document.getElementById('memo').value

    var asset_tag = document.getElementById('asset-type')

    var asset = asset_tag.options[asset_tag.selectedIndex].text

    if (asset == "Lumens") {
      asset = StellarSdk.Asset.native()
    } else {
      var asset_arr = asset.split(',')

      var asset_code = asset_arr[0].replace(/\s/g,'')

      var asset_issuer = asset_arr[1].replace(/\s/g,'')

      asset = new StellarSdk.Asset(asset_code, asset_issuer)
    }

    if (sourceSecretKey.length == 0 || receiverPublicKey.length == 0 || amount.length == 0) {
      $("#layout-alert").show()

      $("#layout-alert").html("Please Enter All Details.")
    } else {
      $("#layout-alert").hide()

      progressbar()
      
      // Derive Keypair object and public key (that starts with a G) from the secret
      var sourceKeypair = StellarSdk.Keypair.fromSecret(sourceSecretKey)

      var sourcePublicKey = sourceKeypair.publicKey()
      
      // var server = new StellarSdk.Server('https://horizon-testnet.stellar.org')
      var server = new StellarSdk.Server('https://horizon.stellar.org')

      StellarSdk.Network.usePublicNetwork()
      // StellarSdk.Network.useTestNetwork()

      var set_memo = StellarSdk.Memo.text(memo)

      if (memo_type == 'id') {
        set_memo = StellarSdk.Memo.id(memo)
      } else if (memo_type == 'hash') {
        set_memo = StellarSdk.Memo.hash(memo)
      } else if (memo_type == 'return') {
        set_memo = StellarSdk.Memo.return(memo)
      } else {
        set_memo = StellarSdk.Memo.text(memo)
      }

      server.loadAccount(sourcePublicKey)
       .then(function(account) {
         var transaction = new StellarSdk.TransactionBuilder(account)
           // Add a payment operation to the transaction
           .addOperation(StellarSdk.Operation.payment({
             destination: receiverPublicKey,
             // The term native asset refers to lumens
             // asset: StellarSdk.Asset.native(),
             asset: asset,
             // Lumens are divisible to seven digits past the decimal.
             // They are represented in JS Stellar SDK in string format
             amount: amount,
           })) // TODO Memo
           .addMemo(set_memo)
           // .addMemo(StellarSdk.Memo.text('Hello world!'))
           .build()

         // Sign this transaction with the secret key
         console.log("signing")
         transaction.sign(sourceKeypair)

         server.submitTransaction(transaction)
           .then(function(transactionResult) {
             // console.log(JSON.stringify(transactionResult, null, 2))
             // console.log('\nSuccess! View the transaction at: ')
             // console.log(transactionResult._links.transaction.href)
             document.location.href = '/success?transaction_url=' + transactionResult._links.transaction.href
           })
           .catch(function(err) {
             console.log('An error has occured:')
             console.log(err)

             var result_code = err.data.extras.result_codes.operations[0]
             console.log(result_code)

             if (result_code == 'op_no_destination') {
               fund_new_account(sourcePublicKey, receiverPublicKey, amount)
             } else if (result_code == 'op_no_trust') {
               document.location.href = '/trust_asset?failed=true&address='+ receiverPublicKey + '&asset_code=' + asset_code + '&asset_issuer=' + asset_issuer
             } else {
               // document.location.href = '/failed?error_description=' + result_code
             }
           })
       })
       .catch(function(e) {
         console.log(e.message.detail)
         console.error(e)
         document.location.href = '/failed?error_description=' + e.message.detail
       })
    }  
  }) // btn click end
